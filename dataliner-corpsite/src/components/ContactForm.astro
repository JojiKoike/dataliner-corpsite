---
import H2 from './atoms/H2.astro';
import TextArea from './TextArea.astro';
import TextInput from './TextInput.astro';
const recaptchaSiteKey = import.meta.env.PUBLIC_RECAPTCHA_SITE_KEY;
---

<div class="flex min-h-screen items-center justify-center bg-gray-100 px-4">
  <form
    id="form"
    class="w-full max-w-lg rounded-lg bg-white p-6 shadow-md md:max-w-2xl md:p-8"
    aria-labelledby="form-title"
    role="form"
  >
    <!-- Form Title -->
    <H2 id="form-title" className="text-center"> Contact Us </H2>

    <!-- Name Field -->
    <TextInput label="Name" name="name" placeholder="Your Name" required />

    <!-- Email Field -->
    <TextInput
      label="Email"
      name="email"
      placeholder="Your Email Address"
      required
    />

    <!-- Message Field -->
    <TextArea
      label="Message"
      name="message"
      placeholder="Your Message"
      required
    />

    <!-- Buttons -->
    <div
      class="flex flex-col items-stretch gap-4 sm:flex-row sm:items-center sm:justify-between"
    >
      <button
        type="submit"
        class="w-full rounded-lg bg-blue-500 px-8 py-4 text-base text-white transition hover:bg-blue-600 sm:w-auto md:text-lg"
        aria-label="Submit the form"
      >
        Submit
      </button>
      <button
        type="reset"
        class="w-full rounded-lg bg-gray-200 px-8 py-4 text-base text-gray-700 transition hover:bg-gray-300 sm:w-auto md:text-lg"
        aria-label="Clear all form fields"
      >
        Cancel
      </button>
    </div>
  </form>
</div>

<script
  is:inline
  src={`https://www.google.com/recaptcha/api.js?render=${recaptchaSiteKey}&hl=ja`}
></script>
<script>
  const form = document.getElementById('form');
  form?.addEventListener('submit', submitFormData);

  function submitFormData(event: Event) {
    const recaptchaSiteKey = import.meta.env.PUBLIC_RECAPTCHA_SITE_KEY;
    event.preventDefault();
    grecaptcha.ready(() => {
      grecaptcha
        .execute(`${recaptchaSiteKey}`, {
          action: 'submit',
        })
        .then(async (token: string) => {
          const target = event.target as typeof event.target & {
            name: { value: string };
            email: { value: string };
            message: { value: string };
          };

          const data = {
            name: target.name.value,
            email: target.email.value,
            message: target.message.value,
            googleReCaptchaToken: token,
          };

          const formData = new FormData();
          Object.entries(data).forEach(([key, value]) => {
            formData.append(key, value);
          });

          try {
            const response = await sendRequest(formData);
            if (response.ok) {
              window.location.href = '/contact/thanks';
            } else {
              window.location.href = '/contact/error';
            }
          } catch (error) {
            window.location.href = '/contact/error';
          }
        });
    });
  }

  async function sendRequest(formData: FormData) {
    const newtFormUID = import.meta.env.PUBLIC_NEWT_FORM_UID;
    return await fetch(
      `https://data-liner-com.form.newt.so/v1/${newtFormUID}`,
      {
        method: 'POST',
        body: formData,
        headers: {
          Accept: 'application/json',
        },
      }
    );
  }
</script>
